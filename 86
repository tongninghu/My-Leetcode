Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if (!head) return NULL;
        
        ListNode* fakeHead = new ListNode(-1);
        fakeHead->next = head;
        ListNode* s = fakeHead;
        ListNode* Lp = fakeHead;
        ListNode* L = fakeHead->next;
        ListNode* snext = s->next;
        ListNode* Lnext = L->next;
        
        while(L && s->next->val < x) {
            s = s->next;
            L = L->next;
            Lp = Lp->next;
        }
        
        while(L) {
            if (L->val < x) {
                snext = s->next;
                Lnext = L->next;
                s->next = L;
                L->next = snext;
                s = s->next;
                L = Lnext;
                Lp->next = L;
            }
            else {
                L = L->next;
                Lp = Lp->next;
            }
        }
       return fakeHead->next; 
    }
};
