Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {

        ListNode* fakeHead = new ListNode(-1);
        fakeHead->next = head;
        ListNode* fp = fakeHead;
        ListNode* sp = fakeHead;
        ListNode* prev = NULL;
        
        int i  = 0;
        while(i < n) {
            fp = fp->next;
            ++i;
        }
        while(fp) {
            fp = fp->next;
            sp = sp->next;
            if (!prev) prev = fakeHead;
            else prev = prev->next;
        }
        ListNode *temp;
        temp = sp;
        prev->next = sp->next;
        delete (temp);
        return fakeHead->next;
    }
};
