Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size() == 0) return -1;
        
        int begin = 0, end = nums.size() - 1, mid = end / 2, i = 1;
        
        while (begin != end) {
            if (nums[mid] == target) return mid;
            
            if (nums[begin] <= nums[mid] && nums[mid] <= nums[end]) {
                if (target < nums[mid]) end = mid;
                else begin = mid + 1;
            }
            else if (nums[mid] > nums[end]) {
                if (nums[begin] <= target && target <= nums[mid])   end = mid;
                else  begin = mid + 1;
            }
            else if (nums[mid] < nums[begin]) {
                if (nums[mid] <= target && target <= nums[end])     begin = mid + 1;
                else   end = mid;
            }
            mid = (end - begin) / 2 + begin;
        }
        return nums[begin] == target? begin : -1;
    }
};
