Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (!head) return NULL;
        
        ListNode* fakeHead = new ListNode(-1);
        fakeHead->next = head;
        ListNode* sp = fakeHead->next;
        ListNode* fp = fakeHead->next->next;
        ListNode* prev = fakeHead;
        ListNode* temp = NULL;
        
        int i = 2;
        while (fp) {
            if (i%2 == 1) {
               fp = fp->next;
               sp = sp->next;
               prev = prev->next;
            }
            else {
                temp = fp->next;
                prev->next = fp;
                fp->next = sp;
                sp->next = temp;
                temp = fp;
                fp = sp;
                sp = temp;
                fp = fp->next;
                sp = sp->next;
                prev = prev->next;
            }
            i++;
        }
        return fakeHead->next;
        
    }
};
