Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (!head) return NULL;
        
        ListNode* fakeHead = new ListNode(-1), *prev = fakeHead, *ptr = head;
        fakeHead->next = head;
        int dup = 0;
        
        while (ptr && ptr->next) {
            if (ptr->val == ptr->next->val || (ptr->val == dup && ptr != head)) {
                dup = ptr->val;
                prev->next = ptr->next;
                delete (ptr);
                ptr = prev->next;
            }  
            
            else {
                ptr = ptr->next;
                prev = prev->next;
            }
        }
        
        if (ptr->val == dup) prev->next = NULL;
        
        return fakeHead->next;
    }
};
