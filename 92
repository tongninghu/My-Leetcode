Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if (!head) return NULL;
        
        ListNode *fakeHead = new ListNode(-2); 
        fakeHead->next = head;
        ListNode *p = fakeHead, *q = head, *qq = head->next;
        ListNode *temp;
        
        int i = 1;
        while (i < m) {
            p = p->next;
            q = q->next;
            qq = qq->next;
            i++;
        }
        

        
        while (i < n) {
            temp = qq->next;
            qq->next = q;
            q = qq;
            qq = temp;
            i++;
        }
        
        temp = p->next;
        p->next = q;
        temp->next = qq;
        
        return fakeHead->next;
        
    }
};
