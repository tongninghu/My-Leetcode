Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if (nums.size() == 0) return false;
        
        int begin = 0, end = nums.size() - 1, mid = end / 2;
        
        while (begin != end) {
            if (nums[mid] == target) return true;
            
            if (nums[mid] == nums[end]) {
                end--;
            }
            else if (nums[begin] <= nums[mid] && nums[mid] < nums[end]) {
                if (target < nums[mid])   end = mid;
                else       begin = mid + 1;
            }
            else if (nums[mid] > nums[end]) {
                if (nums[begin] <= target && target <= nums[mid])    end = mid;
                else      begin = mid + 1;
            }
            else if (nums[mid] < nums[begin]) {
                if (nums[mid] <= target && target <= nums[end])      begin = mid + 1;
                else       end = mid;
            }
            mid = (end - begin) / 2 + begin;
        }
        return nums[begin] == target? true : false;
    }
};
