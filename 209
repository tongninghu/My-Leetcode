Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        if (nums.size() == 0) return 0;
        int low = 0, l = 1, maxs;
        int sum[nums.size()] = {0};
        
        while (l <= nums.size()) {
            maxs = 0;
            for (low = 0; low < (nums.size() - l + 1); low++) {
                sum[low] = sum[low] + nums[low + l - 1];
                if (low == 0) maxs = sum[low];
                else maxs = max(maxs, sum[low]);
            }
            if (maxs >= s) return l;
            else l++;
        }
        return 0;
    }
};
