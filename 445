You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1;
        stack<int> s2;
        ListNode *head = NULL;
        ListNode *p = NULL;
        while(l1) {
            s1.push(l1->val);
            l1 = l1->next;
        }
        while(l2) {
            s2.push(l2->val);
            l2 = l2->next;
        }
        
        int i, c = 0;
        
        while(!s1.empty() || !s2.empty()) {
            if (!s1.empty() && !s2.empty()) {
                i = s1.top() + s2.top() + c; 
                if (i >9) {
                    i = i - 10;
                    c = 1;
                }
                else {
                    c = 0;
                }
                if (!head) {
                    head = new ListNode(i);
                    s1.pop();
                    s2.pop();
                }
                else {
                p = new ListNode(i);
                p->next = head;
                head = p;
                s1.pop();
                s2.pop();
                }
            }
            else if (!s1.empty()) {
                i = s1.top() + c;
                if (i >9) {
                    i = i - 10;
                    c = 1;
                }
                else {
                    c = 0;
                }
                p = new ListNode(i);
                p->next = head;
                head = p;
                s1.pop();
            }
            else {
                i = s2.top() + c;
                if (i >9) {
                    i = i - 10;
                    c = 1;
                }
                else {
                    c = 0;
                }
                p = new ListNode(i);
                p->next = head;
                head = p;
                s2.pop();
            }
        }
        if (c == 1) {
                p = new ListNode(1);
                p->next = head;
                head = p;
        }
        return head;
    }
};
