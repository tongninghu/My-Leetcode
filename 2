You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *ptr1 = l1;
        ListNode *ptr2 = l2;
 
        ListNode *fakeHead = new ListNode(-1);
        ListNode *ptr = fakeHead;
        
        
        int sum = 0;
        int c = 0;
        while(ptr1 || ptr2) {
           if (ptr1 && ptr2) {
               sum = ptr1->val + ptr2->val + c;
               c = sum / 10;
               sum = sum % 10;
               ptr1 = ptr1->next;
               ptr2 = ptr2->next;
         
               ptr->next = new ListNode(sum);
               ptr = ptr->next;
           }
           else if (ptr1) {
               sum = ptr1->val + c;
               c = sum / 10;
               sum = sum % 10;
               ptr1 = ptr1->next;
               ptr->next = new ListNode(sum);
               ptr = ptr->next;
           }
            else {
               sum = ptr2->val + c;
               c = sum / 10;
               sum = sum % 10;
               ptr2 = ptr2->next;
               ptr->next = new ListNode(sum);
               ptr = ptr->next;
           } 
        }
        
        if (c == 1) {
               ptr->next = new ListNode(1);
               ptr = ptr->next;
        }
        return fakeHead->next;
    }
};
