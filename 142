Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (!head) return NULL;
        
        ListNode *sp = NULL, *fp = head;
        
        while (fp && fp->next && (fp != sp)) {
            
            if (!sp) sp = head;
            
            fp = fp->next->next;
            sp = sp->next;
  
        }
        
        if (!fp || !fp->next) return NULL;
        
        fp = head;
        while (fp != sp) {
            fp = fp->next;
            sp = sp->next;
        }
        
        return fp;
    }
};
